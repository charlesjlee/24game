{"version":3,"sources":["components/inputSquare.js","components/inputBoard.js","components/inputScreen.js","components/loadingScreen.js","components/displaySquare.js","components/line.js","components/displayBoard.js","components/word.js","components/resultsScreen.js","functions/wordHunt.js","components/sizeChoice.js","components/sizeScreen.js","App.js","index.js"],"names":["InputSquare","props","useState","fontSize","setFontSize","square","useRef","calcFontSize","width","current","getBoundingClientRect","useEffect","focused","focus","window","addEventListener","removeEventListener","disable","e","preventDefault","ref","className","defaultValue","letter","style","maxLength","onKeyDown","keyCode","setLetter","row","col","key","setFocus","submit","onPaste","onDrop","InputBoard","array","Array","size","i","length","j","letters","setLetters","focusedSquare","setFocusedSquare","copy","toUpperCase","boardFilled","setBoardFilled","setBoard","numbers","keys","map","InputScreen","onClick","goHome","findWords","LoadingScreen","numDots","setNumDots","interval","setInterval","prevDots","clearInterval","repeat","DisplaySquare","setPos","rect","x","left","scrollX","right","y","top","scrollY","bottom","Line","line","offset","clientHeight","initialLength","Math","sqrt","end","start","normalX","normalY","angle","atan2","posX","posY","element","transform","DisplayBoard","squarePositions","setSquarePositions","lines","path","push","rowIndex","colIndex","pos","prevState","rowCopy","setSquarePosition","index","Word","tabIndex","onFocus","setPath","word","ResultsScreen","atTop","setAtTop","wordsDiv","results","board","disabled","scrollTop","scrollLeft","onScroll","target","result","cloneArray","newArray","checkWord","charAt","newBoard","substr","isMatch","foundPath","newPath","wordHunt","a","fetch","then","r","text","t","words","split","trim","sort","b","SizeChoice","select","SizeScreen","selectSize","App","screen","setScreen","setSize","setResults","screenToShow","selectedSize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b67514b.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport '../css/inputSquare.css'\n\nconst InputSquare = props => {\n\n    const [fontSize, setFontSize] = useState(\"0px\");\n\n    const square = useRef(null);\n\n    const calcFontSize = () => {\n        const rect = square.current.getBoundingClientRect();\n        const width = rect.width;\n        const size = (width * 0.6) + \"px\";\n        setFontSize(size);\n    }\n\n    useEffect(() => {\n        if (props.focused) square.current.focus();\n        calcFontSize();\n        window.addEventListener(\"resize\", calcFontSize);\n        return () => window.removeEventListener(\"resize\", calcFontSize)\n    });\n\n    const handleKeyDown = e => {\n        e.preventDefault();\n        if (e.keyCode >= 65 && e.keyCode <= 90) { // letters\n            props.setLetter(props.row, props.col, e.key);\n            props.setFocus(props.row, props.col + 1);\n        }\n        else if (e.keyCode === 8) { // backspace\n            props.setLetter(props.row, props.col, \"\");\n            props.setFocus(props.row, props.col - 1);\n        }\n        else if (e.keyCode === 46) { // delete\n            props.setLetter(props.row, props.col, \"\");\n            props.setFocus(props.row, props.col);\n        }\n        else if (e.keyCode === 37) { // left\n            props.setFocus(props.row, props.col - 1);\n        }\n        else if (e.keyCode === 38) { // up\n            props.setFocus(props.row - 1, props.col);\n        }\n        else if (e.keyCode === 39) { // right\n            props.setFocus(props.row, props.col + 1);\n        }\n        else if (e.keyCode === 40) { // down\n            props.setFocus(props.row + 1, props.col);\n        }\n        else if (e.keyCode === 13) { // enter\n            props.submit();\n        }\n    }\n\n    const disable = e => {\n        e.preventDefault();\n    }\n\n    return (\n        <input\n            ref={square}\n            className=\"inputSquare\"\n            defaultValue={props.letter}\n            style={{fontSize: fontSize}}\n            maxLength=\"1\"\n            onKeyDown={handleKeyDown}\n            onPaste={disable}\n            onDrop={disable}\n        ></input>\n    );\n}\n\nexport default InputSquare","import { useState } from 'react';\nimport InputSquare from './inputSquare';\nimport '../css/inputBoard.css';\n\nconst InputBoard = props => {\n\n    let array = new Array(props.size);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = new Array(props.size);\n        for (let j = 0; j < props.size; j++) {\n            array[i][j] = \"\";\n        }\n    }\n\n    const [letters, setLetters] = useState(array);\n    const [focusedSquare, setFocusedSquare] = useState({row: 0, col: 0});\n\n    const setLetter = (row, col, letter) => {\n\n        let copy = [...letters];\n        copy[row][col] = letter ? letter.toUpperCase() : null;\n        setLetters(copy);\n\n        let boardFilled = true;\n        for (let i = 0; i < props.size; i++) {\n            for (let j = 0; j < props.size; j++) {\n                if (!copy[i][j]) {\n                    boardFilled = false;\n                    break;\n                }\n            }\n        }\n        props.setBoardFilled(boardFilled);\n        if (boardFilled) props.setBoard(copy);\n    }\n\n    const setFocus = (row, col) => {\n        if (row < 0) row = 0;\n        if (row >= props.size) row = props.size - 1;\n        if (col < 0) {\n            if (row > 0) {\n                row--;\n                col = props.size - 1;\n            } else {\n                col = 0;\n            }\n        }\n        if (col >= props.size) {\n            if (row < props.size - 1) {\n                row++;\n                col = 0;\n            } else {\n                col = props.size - 1;\n            }\n        }\n        setFocusedSquare({row: row, col: col});\n    }\n\n    const numbers = [...Array(props.size).keys()];\n\n    return (\n        <div className=\"inputBoard\">\n            {numbers.map((row) =>\n                <div key={row} className=\"inputRow\">\n                    {numbers.map((col) =>\n                        <div key={col} className=\"boardItem\">\n                            <InputSquare\n                                letter={letters[row][col]}\n                                row={row}\n                                col={col}\n                                focused={focusedSquare.row === row && focusedSquare.col === col}\n                                setLetter={setLetter}\n                                setFocus={setFocus}\n                                submit={props.submit}\n                            />\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default InputBoard;","import { useState } from 'react';\nimport InputBoard from './inputBoard'\nimport '../css/inputScreen.css'\n\nconst InputScreen = props => {\n\n    const [boardFilled, setBoardFilled] = useState(false);\n\n    const submit = () => {\n        if (boardFilled) props.findWords();\n    }\n\n    return (\n        <div className=\"inputScreen\">\n            <button className=\"backButton\" onClick={props.goHome}></button>\n            <InputBoard size={props.size} setBoard={props.setBoard} setBoardFilled={setBoardFilled} submit={submit}/>\n            {boardFilled ? \n                <button className=\"findWords\" onClick={props.findWords}>FIND WORDS</button>\n            :\n                <p className=\"promptText\">FILL IN EACH SQUARE WITH A LETTER TO CONTINUE</p>\n            }\n        </div>\n    );\n}\n\nexport default InputScreen;","import { useEffect, useState } from 'react';\nimport '../css/loadingScreen.css'\n\nconst LoadingScreen = () => {\n\n    const [numDots, setNumDots] = useState(0);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setNumDots(prevDots => prevDots >= 3 ? 0 : prevDots + 1);\n        }, 500);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"loadingScreen\">\n            <div className=\"loadingTextContainer\">\n                <p className=\"loadingText\">LOADING{\".\".repeat(numDots)}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default LoadingScreen;","import { useEffect, useRef, useState } from \"react\";\nimport '../css/displaySquare.css';\n\nconst DisplaySquare = props => {\n\n    const [fontSize, setFontSize] = useState(\"0px\");\n\n    const square = useRef(null);\n\n    const setPos = () => {\n        const rect = square.current.getBoundingClientRect();\n        const x = (rect.left + window.scrollX + rect.right + window.scrollX) / 2;\n        const y = (rect.top + window.scrollY + rect.bottom + window.scrollY) / 2;\n        props.setPos({x: x, y: y});\n    }\n\n    const calcFontSize = () => {\n        const rect = square.current.getBoundingClientRect();\n        const width = rect.width;\n        const size = (width * 0.6) + \"px\";\n        setFontSize(size);\n    }\n    \n    useEffect(() => {\n        setPos();\n        calcFontSize();\n        window.addEventListener(\"resize\", setPos);\n        window.addEventListener(\"resize\", calcFontSize);\n        return () => {\n            window.removeEventListener(\"resize\", setPos);\n            window.removeEventListener(\"resize\", calcFontSize)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div ref={square} className=\"displaySquare\">\n            <p className=\"displayLetter\" style={{fontSize: fontSize}}>{props.letter}</p>\n        </div>\n    );\n}\n\nexport default DisplaySquare;","import { useEffect, useRef } from 'react';\nimport '../css/line.css'\n\nconst Line = props => {\n\n    const line = useRef(null);\n    useEffect(() => {\n\n        // get the height of the line to use in calculations\n        const offset = line.current.clientHeight / 2;\n\n        // figure out the true start and end points, adjusted for the line's width\n        const initialLength = Math.sqrt((props.end.x - props.start.x) ** 2 + (props.end.y - props.start.y) ** 2);\n        const normalX = (props.end.x - props.start.x) / initialLength;\n        const normalY = (props.end.y - props.start.y) / initialLength;\n        const start = {x: props.start.x - (normalX * offset), y: props.start.y - (normalY * offset)};\n        const end = {x: props.end.x + (normalX * offset), y: props.end.y + (normalY * offset)};\n    \n        // calculate all of the variables\n        const length = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2);\n        const angle = Math.atan2(end.y - start.y, end.x - start.x);\n        const midpointX = (start.x + end.x) / 2;\n        const midpointY = (start.y + end.y) / 2;\n        const posX = midpointX - (length / 2);\n        const posY = midpointY - offset;\n\n        // set the line in the correct position\n        const element = line.current;\n        element.style.width = length + \"px\";\n        element.style.top = posY + \"px\";\n        element.style.left = posX + \"px\";\n        element.style.transform = \"rotate(\" + angle + \"rad)\"\n    });\n\n    return (\n        <div ref={line} className=\"line\"></div>\n    )\n}\n\nexport default Line;","import { useState } from 'react';\nimport '../css/displayBoard.css';\nimport DisplaySquare from './displaySquare';\nimport Line from './line';\n\nconst DisplayBoard = props => {\n\n    // store the position of each square, start with them all init to 0, 0\n    let array = new Array(props.letters.length);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = new Array(props.size);\n        for (let j = 0; j < props.letters.length; j++) {\n            array[i][j] = {x: 0, y: 0};\n        }\n    }\n    const [squarePositions, setSquarePositions] = useState(array);\n\n    // create an array of lines out of our path\n    let lines = [];\n    for (let i = 1; i < props.path.length; i++) {\n        lines.push({\n            start: props.path[i - 1],\n            end: props.path[i] \n        });\n    }\n\n    // function to set the position of a square\n    const setSquarePosition = (pos, x, y) => {\n        setSquarePositions(prevState => {\n            let copy = [...prevState];\n            let rowCopy = [...copy[x]];\n            rowCopy[y] = pos;\n            copy[x] = rowCopy;\n            return copy;\n        });\n    }\n\n    return (\n        <div className=\"displayBoard\">\n            {props.letters.map((row, rowIndex) => \n                <div key={rowIndex} className=\"displayRow\">\n                    {row.map((letter, colIndex) =>\n                        <div key={colIndex} className=\"displayBoardItem\">\n                            <DisplaySquare letter={letter} setPos={pos => setSquarePosition(pos, rowIndex, colIndex)}/>\n                        </div>\n                    )}\n                </div>\n            )}\n            {lines.map((line, index) =>\n                <Line key={index} start={squarePositions[line.start.x][line.start.y]} end={squarePositions[line.end.x][line.end.y]}/>\n            )}\n        </div>\n    );\n}\n\nexport default DisplayBoard;","import '../css/word.css';\n\nconst Word = props => {\n    return (\n        <div className=\"word\" tabIndex=\"0\" onFocus={() => props.setPath(props.path)}>\n            <p className=\"wordText\">{props.word}</p>\n        </div>\n    );\n}\n\nexport default Word;","import { useState, useRef } from \"react\";\nimport DisplayBoard from \"./displayBoard\";\nimport '../css/resultsScreen.css';\nimport Word from \"./word\";\n\nconst ResultsScreen = props => {\n\n    const [path, setPath] = useState([]);\n    const [atTop, setAtTop] = useState(true);\n    const wordsDiv = useRef(null);\n\n    const scrollToTop = () => {\n        wordsDiv.current.scrollTop = 0;\n        wordsDiv.current.scrollLeft = 0;\n    }\n\n    const handleScroll = (e) => {\n        setAtTop(!e.target.scrollTop && !e.target.scrollLeft)\n    }\n\n    return (\n        <div className=\"resultsScreen\">\n            <button className=\"backButton\" onClick={props.goHome}></button>\n            <div className=\"boardDiv\">\n                <p className=\"wordCount\">{props.results.length} WORD{props.results.length !== 1 ? \"S\" : \"\"}</p>\n                <DisplayBoard letters={props.board} path={path}/>\n            </div>\n            {props.results.length > 0 && <div className=\"wordsDivOuter\">\n                <button className=\"toTopButton\" disabled={atTop} onClick={scrollToTop}></button>\n                <div className=\"wordsDiv\" ref={wordsDiv} onScroll={handleScroll}>\n                    {props.results.map(result =>\n                        <Word key={result.word} word={result.word} path={result.path} setPath={setPath}/>\n                    )}\n                </div>\n            </div>}\n        </div>\n    );\n}\n\nexport default ResultsScreen;","/*\n * helper function to clone a 2d array\n */\nconst cloneArray = array => {\n    let newArray = [];\n    for (let i = 0; i < array.length; i++) {\n        newArray[i] = [...array[i]];\n    }\n    return newArray;\n}\n\n/*\n * recursive function that searches for a word letter by letter\n */\nconst checkWord = (board, word, path = []) => {\n\n    // if the word length is zero we found a match\n    if (word.length === 0) return [true, path];\n\n    // if this is the first run, find all places we can start and recurse\n    if (path.length === 0) {\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board.length; j++) {\n                if (board[i][j] === word.charAt(0)) {\n                    let newBoard = cloneArray(board);\n                    newBoard[i][j] = null;\n                    const [isMatch, foundPath] = checkWord(newBoard, word.substr(1), [{x: i, y: j}]);\n                    if (isMatch) return [true, foundPath];\n                }\n            }\n        }\n    }\n\n    // if this is not the first run, check all adjacent squares to our current square and look for the next letter\n    else {\n        let pos = path[path.length - 1];\n        for (const i of [-1, 0, 1]) {\n            for (const j of [-1, 0, 1]) {\n                if (i === 0 && j === 0) continue;\n                let x = pos.x + i;\n                let y = pos.y + j;\n                if (x < 0 || y < 0 || x >= board.length || y >= board.length) continue\n                if (board[x][y] === word.charAt(0)) {\n                    let newBoard = cloneArray(board);\n                    newBoard[x][y] = null;\n                    let newPath = [...path];\n                    newPath.push({x: x, y: y});\n                    const [isMatch, foundPath] = checkWord(newBoard, word.substr(1), newPath);\n                    if (isMatch) return [true, foundPath];\n                }\n            }\n        }\n    }\n\n    // if we reached here we didn't find a match\n    return [false, null];\n}\n\n/*\n * main function\n */\nconst wordHunt = async board => {\n\n    let results = [];\n\n    // fetch words from the dictionary\n    await fetch('dictionary.txt')\n    .then(r => r.text())\n    .then(t => {\n        const words = t.split(\"\\n\");\n        for (let word of words) {\n            // format word\n            word = word.trim().toUpperCase();\n            if (word.length < 3) continue;\n            // check if word is a match\n            const [isMatch, path] = checkWord(board, word);\n            if (isMatch) results.push({word: word, path: path});\n        }\n        // sort results by length (they are automatically sorted alphabetically because that's the order the list is in)\n        results.sort((a, b) => {\n            if (a.word.length > b.word.length) return -1;\n            else if (b.word.length > a.word.length) return 1\n            else return 0;\n        });\n    });\n\n    return results;\n}\n\nexport default wordHunt;","import '../css/sizeChoice.css';\n\nconst SizeChoice = props => {\n\n    const numbers = [...Array(props.size).keys()];\n\n    return (\n        <div className=\"sizeChoice\" onClick={() => props.select(props.size)}>\n            <div>\n                {numbers.map((row) =>\n                    <div key={row} className=\"gridRow\">\n                        {numbers.map((col) =>\n                            <div key={col} className=\"gridItem\">\n                                <div className=\"gridSquare\"></div>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n            <p className=\"choiceText\">{props.size}x{props.size}</p>\n        </div>\n    );\n}\n\nexport default SizeChoice;","import '../css/sizeScreen.css'\nimport SizeChoice from './sizeChoice'\n\nconst SizeScreen = props => {\n    return (\n        <div className=\"sizeScreen\">\n            <p className=\"sizeHeader\">SELECT A GRID SIZE</p>\n            <div className=\"sizeChoices\">\n                <SizeChoice size={4} select={props.selectSize}/>\n                <SizeChoice size={5} select={props.selectSize}/>\n            </div>\n        </div>\n    );\n}\n\nexport default SizeScreen;","import { useState } from 'react';\nimport InputScreen from './components/inputScreen';\nimport LoadingScreen from './components/loadingScreen';\nimport ResultsScreen from './components/resultsScreen';\nimport wordHunt from './functions/wordHunt';\nimport SizeScreen from './components/sizeScreen';\n\nfunction App() {\n\n\tconst [screen, setScreen] = useState(0);\n\tconst [size, setSize] = useState(4);\n\tconst [board, setBoard] = useState(null);\n\tconst [results, setResults] = useState([]);\n\n\tconst goHome = () => {\n\t\tsetScreen(0);\n\t}\n\n\tconst selectSize = (selectedSize) => {\n\t\tsetSize(selectedSize);\n\t\tsetScreen(1);\n\t}\n\n\tconst findWords = () => {\n\t\tsetScreen(2);\n\t\twordHunt(board).then(result => {\n\t\t\tsetResults(result);\n\t\t\tsetScreen(3);\n\t\t});\n\t}\n\n\tlet screenToShow = null;\n\tif (screen === 0) screenToShow = <SizeScreen selectSize={selectSize}/>\n\tif (screen === 1) screenToShow = <InputScreen size={size} setBoard={setBoard} findWords={findWords} goHome={goHome}/>\n\tif (screen === 2) screenToShow = <LoadingScreen/>\n\tif (screen === 3) screenToShow = <ResultsScreen board={board} results={results} goHome={goHome}/>\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{screenToShow}\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}